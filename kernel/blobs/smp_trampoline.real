org 0x1000
bits 16

cli
cld

xor ax, ax
mov ds, ax

; set the flag
mov byte [0x510], 1

jmp 0x0:fix_cs
fix_cs:
mov es, ax
mov fs, ax
mov gs, ax
mov ss, ax

lgdt [gdt_ptr]

mov edx, dword [0x540]
mov cr3, edx

mov eax, cr4
or eax, 1 << 5
mov cr4, eax

mov ecx, 0xc0000080
rdmsr

or eax, 0x00000100
wrmsr

mov eax, cr0
or eax, 0x80000001
and eax, ~(0x60000000)
mov cr0, eax

jmp 0x08:.mode64
.mode64:
bits 64
mov ax, 0x10
mov ds, ax
mov es, ax
mov ss, ax
mov fs, ax
mov gs, ax

mov rsp, qword [0x550]

lgdt [0x580]
lidt [0x590]

; Load FS with the CPU local struct base address
mov rcx, 0xc0000100
mov eax, dword [0x560]
mov edx, dword [0x560+4]
wrmsr

; Load TSS
mov ax, 0x28
ltr ax

; jump to entry point
mov rbx, qword [0x520]
call rbx

align 16

gdt_ptr:
    dw .gdt_end - .gdt_start - 1  ; GDT size
    dq .gdt_start                 ; GDT start

align 16
.gdt_start:

; Null descriptor (required)
.null_descriptor:
    dw 0x0000           ; Limit
    dw 0x0000           ; Base (low 16 bits)
    db 0x00             ; Base (mid 8 bits)
    db 00000000b        ; Access
    db 00000000b        ; Granularity
    db 0x00             ; Base (high 8 bits)

; 64 bit mode kernel
.kernel_code_64:
    dw 0x0000           ; Limit
    dw 0x0000           ; Base (low 16 bits)
    db 0x00             ; Base (mid 8 bits)
    db 10011010b        ; Access
    db 00100000b        ; Granularity
    db 0x00             ; Base (high 8 bits)

.kernel_data:
    dw 0x0000           ; Limit
    dw 0x0000           ; Base (low 16 bits)
    db 0x00             ; Base (mid 8 bits)
    db 10010010b        ; Access
    db 00000000b        ; Granularity
    db 0x00             ; Base (high 8 bits)

.gdt_end:
